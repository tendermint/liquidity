name: Tests / Code Coverage
#  Tests / Code Coverage workflow runs unit tests and uploads a code coverage report
#  This workflow is run on pushes to master & every Pull Requests where a .go, .mod, .sum have been changed
on:
  pull_request:
  push:
    branches:
      - master
      - develop
jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop'"
  
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-arch: ["amd64", "arm64"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - uses: technote-space/get-diff-action@v4
        id: git_diff
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - name: Build
        run: GOARCH=${{ matrix.go-arch }} LEDGER_ENABLED=false make build

  test-coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - name: display go version
        run: go version
      - name: test & coverage report creation
        run: make test-cover
      - name: filter out DONTCOVER
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/tendermint\/liquidity/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done
      - uses: codecov/codecov-action@v1.0.14
        with:
          file: ./coverage.txt

  test-race:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - name: display go version
        run: go version
      - name: test & coverage report creation
        run: make test-race
      - name: filter out DONTCOVER
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -name '*.pb.gw.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/tendermint\/liquidity/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done
      - uses: codecov/codecov-action@v1.0.14
        with:
          file: ./coverage.txt

  test-sim-nondeterminism:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16
      - name: Display go version
        run: go version
      - name: Testing simulation
        run: make test-sim-nondeterminism

  test-sim-after-import:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16
      - name: Display go version
        run: go version
      - name: Testing simulation
        run: make test-sim-after-import

  test-sim-import-export:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16
      - name: Display go version
        run: go version
      - name: Testing simulation
        run: make test-sim-import-export
