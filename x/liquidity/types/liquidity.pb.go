// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: liquidity.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityPoolType struct {
	PoolTypeIndex     uint32 `protobuf:"varint,1,opt,name=poolTypeIndex,proto3" json:"poolTypeIndex,omitempty" yaml:"pool_type_index"`
	Name              string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty" yaml:"name"`
	MinReserveCoinNum uint32 `protobuf:"varint,3,opt,name=MinReserveCoinNum,proto3" json:"MinReserveCoinNum,omitempty" yaml:"min_reserve_coin_num"`
	MaxReserveCoinNum uint32 `protobuf:"varint,4,opt,name=MaxReserveCoinNum,proto3" json:"MaxReserveCoinNum,omitempty" yaml:"max_reserve_coin_num"`
}

func (m *LiquidityPoolType) Reset()         { *m = LiquidityPoolType{} }
func (m *LiquidityPoolType) String() string { return proto.CompactTextString(m) }
func (*LiquidityPoolType) ProtoMessage()    {}
func (*LiquidityPoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{0}
}
func (m *LiquidityPoolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPoolType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPoolType.Merge(m, src)
}
func (m *LiquidityPoolType) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPoolType.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPoolType proto.InternalMessageInfo

type Params struct {
	LiquidityPoolTypes       []LiquidityPoolType                    `protobuf:"bytes,1,rep,name=LiquidityPoolTypes,proto3" json:"LiquidityPoolTypes" yaml:"liquidity_pool_types"`
	MinInitDepositToPool     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=MinInitDepositToPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"MinInitDepositToPool" yaml:"min_init_deposit_to_pool"`
	InitPoolCoinMintAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=InitPoolCoinMintAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"InitPoolCoinMintAmount" yaml:"init_pool_coin_mint_amount"`
	SwapFeeRate              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=SwapFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"SwapFeeRate" yaml:"swap_fee_rate"`
	LiquidityPoolFeeRate     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=LiquidityPoolFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"LiquidityPoolFeeRate" yaml:"liquidity_pool_fee_rate"`
	LiquidityPoolCreationFee []types.Coin                           `protobuf:"bytes,6,rep,name=LiquidityPoolCreationFee,proto3" json:"LiquidityPoolCreationFee" yaml:"liquidity_pool_creation_fee"`
	UnitBatchSize            uint32                                 `protobuf:"varint,7,opt,name=UnitBatchSize,proto3" json:"UnitBatchSize,omitempty" yaml:"unit_batch_size"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type LiquidityPool struct {
	PoolID            uint64                                        `protobuf:"varint,1,opt,name=PoolID,proto3" json:"PoolID,omitempty" yaml:"pool_id"`
	PoolTypeIndex     uint32                                        `protobuf:"varint,2,opt,name=poolTypeIndex,proto3" json:"poolTypeIndex,omitempty" yaml:"pool_type_index"`
	ReserveCoinDenoms []string                                      `protobuf:"bytes,3,rep,name=ReserveCoinDenoms,proto3" json:"ReserveCoinDenoms,omitempty" yaml:"reserve_coin_denoms"`
	ReserveAccount    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=ReserveAccount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"ReserveAccount,omitempty" yaml:"reserve_account"`
	PoolCoinDenom     string                                        `protobuf:"bytes,5,opt,name=PoolCoinDenom,proto3" json:"PoolCoinDenom,omitempty" yaml:"pool_coin_denom"`
}

func (m *LiquidityPool) Reset()         { *m = LiquidityPool{} }
func (m *LiquidityPool) String() string { return proto.CompactTextString(m) }
func (*LiquidityPool) ProtoMessage()    {}
func (*LiquidityPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{2}
}
func (m *LiquidityPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPool.Merge(m, src)
}
func (m *LiquidityPool) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPool.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPool proto.InternalMessageInfo

type LiquidityPoolMetaData struct {
	PoolID              uint64     `protobuf:"varint,1,opt,name=PoolID,proto3" json:"PoolID,omitempty" yaml:"pool_id"`
	PoolCoinTotalSupply types.Coin `protobuf:"bytes,2,opt,name=PoolCoinTotalSupply,proto3" json:"PoolCoinTotalSupply" yaml:"pool_coin_total_supply"`
}

func (m *LiquidityPoolMetaData) Reset()         { *m = LiquidityPoolMetaData{} }
func (m *LiquidityPoolMetaData) String() string { return proto.CompactTextString(m) }
func (*LiquidityPoolMetaData) ProtoMessage()    {}
func (*LiquidityPoolMetaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{3}
}
func (m *LiquidityPoolMetaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPoolMetaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPoolMetaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPoolMetaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPoolMetaData.Merge(m, src)
}
func (m *LiquidityPoolMetaData) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPoolMetaData) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPoolMetaData.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPoolMetaData proto.InternalMessageInfo

type LiquidityPoolBatch struct {
	PoolID           uint64 `protobuf:"varint,1,opt,name=PoolID,proto3" json:"PoolID,omitempty" yaml:"pool_id"`
	BatchIndex       uint64 `protobuf:"varint,2,opt,name=BatchIndex,proto3" json:"BatchIndex,omitempty" yaml:"batch_index"`
	BeginHeight      int64  `protobuf:"varint,3,opt,name=BeginHeight,proto3" json:"BeginHeight,omitempty" yaml:"begin_height"`
	DepositMsgIndex  uint64 `protobuf:"varint,4,opt,name=DepositMsgIndex,proto3" json:"DepositMsgIndex,omitempty" yaml:"deposit_msg_index"`
	WithdrawMsgIndex uint64 `protobuf:"varint,5,opt,name=WithdrawMsgIndex,proto3" json:"WithdrawMsgIndex,omitempty" yaml:"withdraw_msg_index"`
	SwapMsgIndex     uint64 `protobuf:"varint,6,opt,name=SwapMsgIndex,proto3" json:"SwapMsgIndex,omitempty" yaml:"swap_msg_index"`
	ExecutionStatus  bool   `protobuf:"varint,7,opt,name=ExecutionStatus,proto3" json:"ExecutionStatus,omitempty" yaml:"execution_status"`
}

func (m *LiquidityPoolBatch) Reset()         { *m = LiquidityPoolBatch{} }
func (m *LiquidityPoolBatch) String() string { return proto.CompactTextString(m) }
func (*LiquidityPoolBatch) ProtoMessage()    {}
func (*LiquidityPoolBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{4}
}
func (m *LiquidityPoolBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPoolBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPoolBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPoolBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPoolBatch.Merge(m, src)
}
func (m *LiquidityPoolBatch) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPoolBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPoolBatch.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPoolBatch proto.InternalMessageInfo

type BatchPoolDepositMsg struct {
	//    string TxHash = 1 [(gogoproto.moretags) = "yaml:\"tx_hash\""];
	MsgHeight int64                      `protobuf:"varint,1,opt,name=MsgHeight,proto3" json:"MsgHeight,omitempty" yaml:"msg_height"`
	Msg       *MsgDepositToLiquidityPool `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty" yaml:"msg"`
}

func (m *BatchPoolDepositMsg) Reset()         { *m = BatchPoolDepositMsg{} }
func (m *BatchPoolDepositMsg) String() string { return proto.CompactTextString(m) }
func (*BatchPoolDepositMsg) ProtoMessage()    {}
func (*BatchPoolDepositMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{5}
}
func (m *BatchPoolDepositMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPoolDepositMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPoolDepositMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchPoolDepositMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPoolDepositMsg.Merge(m, src)
}
func (m *BatchPoolDepositMsg) XXX_Size() int {
	return m.Size()
}
func (m *BatchPoolDepositMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPoolDepositMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPoolDepositMsg proto.InternalMessageInfo

type BatchPoolWithdrawMsg struct {
	//    string TxHash = 1 [(gogoproto.moretags) = "yaml:\"tx_hash\""];
	MsgHeight int64                         `protobuf:"varint,1,opt,name=MsgHeight,proto3" json:"MsgHeight,omitempty" yaml:"msg_height"`
	Msg       *MsgWithdrawFromLiquidityPool `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty" yaml:"msg"`
}

func (m *BatchPoolWithdrawMsg) Reset()         { *m = BatchPoolWithdrawMsg{} }
func (m *BatchPoolWithdrawMsg) String() string { return proto.CompactTextString(m) }
func (*BatchPoolWithdrawMsg) ProtoMessage()    {}
func (*BatchPoolWithdrawMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{6}
}
func (m *BatchPoolWithdrawMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPoolWithdrawMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPoolWithdrawMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchPoolWithdrawMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPoolWithdrawMsg.Merge(m, src)
}
func (m *BatchPoolWithdrawMsg) XXX_Size() int {
	return m.Size()
}
func (m *BatchPoolWithdrawMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPoolWithdrawMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPoolWithdrawMsg proto.InternalMessageInfo

type BatchPoolSwapMsg struct {
	//    string TxHash = 1 [(gogoproto.moretags) = "yaml:\"tx_hash\""];
	MsgHeight int64    `protobuf:"varint,1,opt,name=MsgHeight,proto3" json:"MsgHeight,omitempty" yaml:"msg_height"`
	Msg       *MsgSwap `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty" yaml:"msg"`
}

func (m *BatchPoolSwapMsg) Reset()         { *m = BatchPoolSwapMsg{} }
func (m *BatchPoolSwapMsg) String() string { return proto.CompactTextString(m) }
func (*BatchPoolSwapMsg) ProtoMessage()    {}
func (*BatchPoolSwapMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_65b46dab34d3c00e, []int{7}
}
func (m *BatchPoolSwapMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchPoolSwapMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchPoolSwapMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchPoolSwapMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchPoolSwapMsg.Merge(m, src)
}
func (m *BatchPoolSwapMsg) XXX_Size() int {
	return m.Size()
}
func (m *BatchPoolSwapMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchPoolSwapMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BatchPoolSwapMsg proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LiquidityPoolType)(nil), "tendermint.liquidity.LiquidityPoolType")
	proto.RegisterType((*Params)(nil), "tendermint.liquidity.Params")
	proto.RegisterType((*LiquidityPool)(nil), "tendermint.liquidity.LiquidityPool")
	proto.RegisterType((*LiquidityPoolMetaData)(nil), "tendermint.liquidity.LiquidityPoolMetaData")
	proto.RegisterType((*LiquidityPoolBatch)(nil), "tendermint.liquidity.LiquidityPoolBatch")
	proto.RegisterType((*BatchPoolDepositMsg)(nil), "tendermint.liquidity.BatchPoolDepositMsg")
	proto.RegisterType((*BatchPoolWithdrawMsg)(nil), "tendermint.liquidity.BatchPoolWithdrawMsg")
	proto.RegisterType((*BatchPoolSwapMsg)(nil), "tendermint.liquidity.BatchPoolSwapMsg")
}

func init() { proto.RegisterFile("liquidity.proto", fileDescriptor_65b46dab34d3c00e) }

var fileDescriptor_65b46dab34d3c00e = []byte{
	// 1100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xc6, 0xae, 0x49, 0x26, 0x4d, 0xd2, 0x4c, 0x9c, 0xc4, 0x49, 0x89, 0x27, 0x4c, 0x55,
	0x88, 0x2a, 0xd5, 0x51, 0x5b, 0x09, 0x89, 0x48, 0x08, 0xb2, 0x49, 0x23, 0x22, 0xea, 0x2a, 0xdd,
	0x04, 0x21, 0x71, 0x59, 0x4d, 0xd6, 0xc3, 0x7a, 0x44, 0x76, 0xd7, 0xec, 0x8c, 0x9b, 0xb8, 0xe2,
	0x82, 0x04, 0x12, 0x12, 0x1c, 0x38, 0x72, 0x01, 0x95, 0x9f, 0xc2, 0x2d, 0xc7, 0x9e, 0x10, 0x42,
	0x62, 0x05, 0xc9, 0x85, 0xf3, 0x1e, 0x39, 0xa1, 0x99, 0x59, 0xaf, 0xd7, 0xf6, 0xa6, 0xaa, 0x7b,
	0xda, 0xf5, 0xbe, 0xf7, 0xbe, 0xef, 0xdb, 0xf7, 0xde, 0x7c, 0x6b, 0x30, 0x77, 0xc2, 0xbe, 0xec,
	0xb0, 0x26, 0x13, 0xdd, 0x7a, 0x3b, 0x0c, 0x44, 0x00, 0x2b, 0x82, 0xfa, 0x4d, 0x1a, 0x7a, 0xcc,
	0x17, 0xf5, 0x34, 0xb6, 0x3a, 0x29, 0xce, 0x74, 0x7c, 0xb5, 0xe2, 0x06, 0x6e, 0xa0, 0x6e, 0x37,
	0xe5, 0x5d, 0xf2, 0x74, 0xd9, 0x09, 0xb8, 0x17, 0x70, 0x5b, 0x07, 0x9c, 0x80, 0xf9, 0x3a, 0x80,
	0x7f, 0x99, 0x00, 0xf3, 0x8f, 0x7a, 0x30, 0x07, 0x41, 0x70, 0x72, 0xd4, 0x6d, 0x53, 0xf8, 0x21,
	0x98, 0x69, 0x27, 0xf7, 0xfb, 0x7e, 0x93, 0x9e, 0x55, 0x8d, 0x75, 0x63, 0x63, 0xc6, 0x5c, 0x8d,
	0x23, 0xb4, 0xd4, 0x25, 0xde, 0xc9, 0x16, 0x96, 0x61, 0x5b, 0x74, 0xdb, 0xd4, 0x66, 0x32, 0x01,
	0x5b, 0x83, 0x05, 0xf0, 0x16, 0x28, 0x3d, 0x26, 0x1e, 0xad, 0x4e, 0xac, 0x1b, 0x1b, 0x53, 0xe6,
	0x5c, 0x1c, 0xa1, 0x69, 0x5d, 0xe8, 0x13, 0x8f, 0x62, 0x4b, 0x05, 0x61, 0x03, 0xcc, 0x37, 0x98,
	0x6f, 0x51, 0x4e, 0xc3, 0xa7, 0x74, 0x27, 0x60, 0xfe, 0xe3, 0x8e, 0x57, 0x2d, 0x2a, 0x2a, 0x14,
	0x47, 0xe8, 0xa6, 0xae, 0xf0, 0x98, 0x6f, 0x87, 0x3a, 0xc7, 0x96, 0xca, 0x6d, 0xbf, 0xe3, 0x61,
	0x6b, 0xb4, 0x52, 0xc1, 0x91, 0xb3, 0x21, 0xb8, 0xd2, 0x08, 0x1c, 0x39, 0xcb, 0x85, 0x1b, 0xae,
	0xdc, 0x2a, 0xfd, 0xfb, 0x1c, 0x19, 0xf8, 0xaf, 0x32, 0x28, 0x1f, 0x90, 0x90, 0x78, 0x1c, 0x7e,
	0x05, 0xe0, 0x48, 0xab, 0x78, 0xd5, 0x58, 0x2f, 0x6e, 0x4c, 0xdf, 0x7f, 0xa7, 0x9e, 0x37, 0x97,
	0xfa, 0x48, 0xbe, 0x79, 0xeb, 0x3c, 0x42, 0x85, 0xbe, 0x9a, 0x34, 0xd5, 0x4e, 0x3b, 0xca, 0xb1,
	0x95, 0xc3, 0x03, 0xbf, 0x35, 0x40, 0xa5, 0xc1, 0xfc, 0x7d, 0x9f, 0x89, 0x5d, 0xda, 0x0e, 0x38,
	0x13, 0x47, 0x81, 0x8c, 0x26, 0x2d, 0x7e, 0x22, 0x71, 0xff, 0x8c, 0xd0, 0xdb, 0x2e, 0x13, 0xad,
	0xce, 0x71, 0xdd, 0x09, 0xbc, 0x4d, 0x3d, 0xf4, 0xe4, 0x72, 0x97, 0x37, 0xbf, 0xd8, 0x54, 0xf8,
	0xf5, 0x7d, 0x5f, 0xc4, 0x11, 0x42, 0xfd, 0xf6, 0x32, 0x9f, 0x09, 0xbb, 0xa9, 0x51, 0x6d, 0x11,
	0x28, 0x2d, 0xd8, 0xca, 0xa5, 0x83, 0xdf, 0x1b, 0x60, 0x49, 0x3e, 0x95, 0x3f, 0x64, 0xab, 0x1a,
	0xcc, 0x17, 0xdb, 0x5e, 0xd0, 0xf1, 0x85, 0x1a, 0xdd, 0x94, 0x79, 0x38, 0xb6, 0x92, 0xb7, 0xb4,
	0x12, 0xa5, 0x42, 0xb5, 0x41, 0xcd, 0x45, 0xb6, 0xd2, 0x26, 0x0a, 0x19, 0x5b, 0x57, 0x50, 0xc2,
	0x16, 0x98, 0x3e, 0x3c, 0x25, 0xed, 0x3d, 0x4a, 0x2d, 0x22, 0xa8, 0x9a, 0xf6, 0x75, 0x73, 0x6f,
	0x0c, 0x05, 0xbb, 0xd4, 0x89, 0x23, 0x54, 0xd1, 0x0a, 0xf8, 0x29, 0x69, 0xdb, 0x9f, 0x53, 0x6a,
	0x87, 0x44, 0x50, 0x6c, 0x65, 0xa1, 0xe1, 0x37, 0x06, 0xa8, 0x0c, 0x8c, 0xa5, 0xc7, 0x79, 0x4d,
	0x71, 0x1e, 0x8c, 0xcd, 0x59, 0xcb, 0xdd, 0x80, 0x3e, 0x7b, 0x2e, 0x1b, 0xfc, 0xda, 0x00, 0xd5,
	0x81, 0xc0, 0x4e, 0x48, 0x89, 0x60, 0x81, 0xbf, 0x47, 0x69, 0xb5, 0xac, 0x76, 0x71, 0xa5, 0xae,
	0x19, 0xeb, 0xc7, 0x84, 0xd3, 0xfa, 0xd3, 0x7b, 0xc7, 0x54, 0x90, 0x7b, 0x75, 0xd9, 0x38, 0xf3,
	0x4e, 0xb2, 0x7d, 0x38, 0x97, 0xdb, 0x49, 0xa0, 0xa4, 0x08, 0x6c, 0x5d, 0x49, 0x23, 0xed, 0xe1,
	0x13, 0x9f, 0x09, 0x93, 0x08, 0xa7, 0x75, 0xc8, 0x9e, 0xd1, 0xea, 0x1b, 0xc3, 0xf6, 0xd0, 0x91,
	0xa3, 0x3c, 0x96, 0x71, 0x9b, 0xb3, 0x67, 0x14, 0x5b, 0x83, 0x05, 0x5b, 0x93, 0x3f, 0x3d, 0x47,
	0x05, 0x75, 0xbe, 0x7e, 0x28, 0x82, 0x99, 0x01, 0x22, 0x78, 0x07, 0x94, 0xe5, 0x75, 0x7f, 0x57,
	0xb9, 0x4e, 0xc9, 0x84, 0x71, 0x84, 0x66, 0x33, 0xae, 0xc3, 0x9a, 0xd8, 0x4a, 0x32, 0x46, 0x8d,
	0x6a, 0x62, 0x5c, 0xa3, 0x7a, 0x04, 0xe6, 0x33, 0xe7, 0x7e, 0x97, 0xfa, 0x81, 0xc7, 0xab, 0xc5,
	0xf5, 0xe2, 0xc6, 0x94, 0x59, 0x8b, 0x23, 0xb4, 0xaa, 0x51, 0x06, 0x0c, 0xa3, 0xa9, 0x92, 0xb0,
	0x35, 0x5a, 0x08, 0x39, 0x98, 0x4d, 0x1e, 0x6e, 0x3b, 0x8e, 0x3a, 0x13, 0x7a, 0x23, 0x3f, 0xee,
	0x0b, 0xea, 0x41, 0x11, 0x9d, 0x80, 0xff, 0x8b, 0xd0, 0xdd, 0x57, 0xd8, 0x99, 0x6d, 0xc7, 0xd9,
	0x6e, 0x36, 0x43, 0xca, 0xb9, 0x35, 0x44, 0x21, 0x9b, 0xd0, 0x3b, 0x19, 0x4a, 0x86, 0xda, 0xc8,
	0xa9, 0x91, 0x26, 0xf4, 0xb5, 0x63, 0x6b, 0xb0, 0x40, 0x8d, 0xc3, 0x50, 0xe3, 0xf8, 0xcd, 0x00,
	0x8b, 0x03, 0xe3, 0x68, 0x50, 0x41, 0x76, 0x89, 0x20, 0x63, 0x8d, 0x25, 0x04, 0x0b, 0x3d, 0x82,
	0xa3, 0x40, 0x90, 0x93, 0xc3, 0x4e, 0xbb, 0x7d, 0xd2, 0x55, 0xc3, 0x79, 0xe9, 0x7a, 0xde, 0x4e,
	0xd6, 0x73, 0x6d, 0x58, 0xb6, 0x90, 0x28, 0x36, 0x57, 0x30, 0xd8, 0xca, 0x03, 0xcf, 0xbc, 0xc3,
	0xef, 0xc5, 0x21, 0xa3, 0x56, 0x7b, 0x37, 0xd6, 0x0b, 0xbc, 0x0b, 0x80, 0x2a, 0xea, 0x2f, 0x55,
	0xc9, 0x5c, 0x8a, 0x23, 0x04, 0x75, 0xbe, 0xde, 0xec, 0x64, 0xa1, 0x32, 0x99, 0xf0, 0x3d, 0x30,
	0x6d, 0x52, 0x97, 0xf9, 0x1f, 0x51, 0xe6, 0xb6, 0xb4, 0x21, 0x16, 0xcd, 0xe5, 0x38, 0x42, 0x0b,
	0x49, 0xa1, 0x0c, 0xda, 0x2d, 0x15, 0xc5, 0x56, 0x36, 0x17, 0xee, 0x81, 0xb9, 0xc4, 0x68, 0x1b,
	0xdc, 0xd5, 0xbc, 0x25, 0xc5, 0xfb, 0x66, 0x1c, 0xa1, 0xaa, 0x2e, 0xef, 0x59, 0xb4, 0xc7, 0xdd,
	0x1e, 0xfb, 0x70, 0x11, 0xdc, 0x07, 0x37, 0x3e, 0x65, 0xa2, 0xd5, 0x0c, 0xc9, 0x69, 0x0a, 0x74,
	0x4d, 0x01, 0xad, 0xc5, 0x11, 0x5a, 0xd1, 0x40, 0xa7, 0x49, 0x46, 0x16, 0x69, 0xa4, 0x0c, 0xbe,
	0x0f, 0xae, 0x4b, 0x07, 0x4c, 0x61, 0xca, 0x0a, 0x66, 0x25, 0x8e, 0xd0, 0x62, 0xc6, 0x2f, 0x33,
	0x10, 0x03, 0xe9, 0xf0, 0x21, 0x98, 0x7b, 0x78, 0x46, 0x9d, 0x8e, 0xb4, 0x8d, 0x43, 0x41, 0x44,
	0x87, 0x2b, 0xa3, 0x98, 0x34, 0x6f, 0xc6, 0x11, 0x5a, 0xd6, 0x08, 0xb4, 0x97, 0x60, 0x73, 0x95,
	0x81, 0xad, 0xe1, 0x9a, 0xcc, 0x60, 0x7f, 0x36, 0xc0, 0x82, 0x6a, 0xb6, 0x9c, 0x52, 0xff, 0xbd,
	0xe1, 0x03, 0x30, 0xd5, 0xe0, 0x6e, 0xd2, 0x73, 0x43, 0xf5, 0x7c, 0x31, 0x8e, 0xd0, 0x7c, 0xf2,
	0x81, 0xe3, 0x6e, 0xda, 0xf1, 0x7e, 0x1e, 0x7c, 0x02, 0x8a, 0x0d, 0xee, 0x26, 0x3b, 0xb9, 0x99,
	0xff, 0xf9, 0x6e, 0x70, 0x37, 0xfd, 0xf8, 0x0d, 0x6e, 0xd4, 0x6c, 0x1c, 0x21, 0x90, 0xe2, 0x63,
	0x4b, 0x62, 0xe1, 0x5f, 0x0d, 0x50, 0x49, 0xf5, 0x65, 0xba, 0xf9, 0x7a, 0x02, 0x8f, 0xb2, 0x02,
	0xef, 0x5f, 0x29, 0xb0, 0xc7, 0xb3, 0x17, 0x06, 0xde, 0x2b, 0x68, 0xfc, 0xce, 0x00, 0x37, 0x52,
	0x8d, 0xc9, 0xb8, 0x5e, 0x4f, 0xdf, 0x07, 0x59, 0x7d, 0x6b, 0x57, 0xea, 0x93, 0x1c, 0xb9, 0x52,
	0xcc, 0x9d, 0xf3, 0x7f, 0x6a, 0x85, 0xf3, 0x8b, 0x9a, 0xf1, 0xe2, 0xa2, 0x66, 0xfc, 0x7d, 0x51,
	0x33, 0x7e, 0xbc, 0xac, 0x15, 0x5e, 0x5c, 0xd6, 0x0a, 0x7f, 0x5c, 0xd6, 0x0a, 0x9f, 0xdd, 0xce,
	0x98, 0x62, 0x1f, 0x7b, 0x33, 0xc5, 0xd6, 0xbe, 0x78, 0x5c, 0x56, 0xff, 0x63, 0x1f, 0xfc, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0xea, 0xe1, 0xbd, 0xc8, 0x29, 0x0b, 0x00, 0x00,
}

func (this *LiquidityPoolType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiquidityPoolType)
	if !ok {
		that2, ok := that.(LiquidityPoolType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolTypeIndex != that1.PoolTypeIndex {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MinReserveCoinNum != that1.MinReserveCoinNum {
		return false
	}
	if this.MaxReserveCoinNum != that1.MaxReserveCoinNum {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LiquidityPoolTypes) != len(that1.LiquidityPoolTypes) {
		return false
	}
	for i := range this.LiquidityPoolTypes {
		if !this.LiquidityPoolTypes[i].Equal(&that1.LiquidityPoolTypes[i]) {
			return false
		}
	}
	if !this.MinInitDepositToPool.Equal(that1.MinInitDepositToPool) {
		return false
	}
	if !this.InitPoolCoinMintAmount.Equal(that1.InitPoolCoinMintAmount) {
		return false
	}
	if !this.SwapFeeRate.Equal(that1.SwapFeeRate) {
		return false
	}
	if !this.LiquidityPoolFeeRate.Equal(that1.LiquidityPoolFeeRate) {
		return false
	}
	if len(this.LiquidityPoolCreationFee) != len(that1.LiquidityPoolCreationFee) {
		return false
	}
	for i := range this.LiquidityPoolCreationFee {
		if !this.LiquidityPoolCreationFee[i].Equal(&that1.LiquidityPoolCreationFee[i]) {
			return false
		}
	}
	if this.UnitBatchSize != that1.UnitBatchSize {
		return false
	}
	return true
}
func (this *LiquidityPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiquidityPool)
	if !ok {
		that2, ok := that.(LiquidityPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolID != that1.PoolID {
		return false
	}
	if this.PoolTypeIndex != that1.PoolTypeIndex {
		return false
	}
	if len(this.ReserveCoinDenoms) != len(that1.ReserveCoinDenoms) {
		return false
	}
	for i := range this.ReserveCoinDenoms {
		if this.ReserveCoinDenoms[i] != that1.ReserveCoinDenoms[i] {
			return false
		}
	}
	if !bytes.Equal(this.ReserveAccount, that1.ReserveAccount) {
		return false
	}
	if this.PoolCoinDenom != that1.PoolCoinDenom {
		return false
	}
	return true
}
func (this *LiquidityPoolMetaData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiquidityPoolMetaData)
	if !ok {
		that2, ok := that.(LiquidityPoolMetaData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolID != that1.PoolID {
		return false
	}
	if !this.PoolCoinTotalSupply.Equal(&that1.PoolCoinTotalSupply) {
		return false
	}
	return true
}
func (this *LiquidityPoolBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiquidityPoolBatch)
	if !ok {
		that2, ok := that.(LiquidityPoolBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolID != that1.PoolID {
		return false
	}
	if this.BatchIndex != that1.BatchIndex {
		return false
	}
	if this.BeginHeight != that1.BeginHeight {
		return false
	}
	if this.DepositMsgIndex != that1.DepositMsgIndex {
		return false
	}
	if this.WithdrawMsgIndex != that1.WithdrawMsgIndex {
		return false
	}
	if this.SwapMsgIndex != that1.SwapMsgIndex {
		return false
	}
	if this.ExecutionStatus != that1.ExecutionStatus {
		return false
	}
	return true
}
func (m *LiquidityPoolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPoolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPoolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxReserveCoinNum != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MaxReserveCoinNum))
		i--
		dAtA[i] = 0x20
	}
	if m.MinReserveCoinNum != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MinReserveCoinNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolTypeIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolTypeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnitBatchSize != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.UnitBatchSize))
		i--
		dAtA[i] = 0x38
	}
	if len(m.LiquidityPoolCreationFee) > 0 {
		for iNdEx := len(m.LiquidityPoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityPoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.LiquidityPoolFeeRate.Size()
		i -= size
		if _, err := m.LiquidityPoolFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.SwapFeeRate.Size()
		i -= size
		if _, err := m.SwapFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitPoolCoinMintAmount.Size()
		i -= size
		if _, err := m.InitPoolCoinMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinInitDepositToPool.Size()
		i -= size
		if _, err := m.MinInitDepositToPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.LiquidityPoolTypes) > 0 {
		for iNdEx := len(m.LiquidityPoolTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityPoolTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReserveAccount) > 0 {
		i -= len(m.ReserveAccount)
		copy(dAtA[i:], m.ReserveAccount)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.ReserveAccount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReserveCoinDenoms) > 0 {
		for iNdEx := len(m.ReserveCoinDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReserveCoinDenoms[iNdEx])
			copy(dAtA[i:], m.ReserveCoinDenoms[iNdEx])
			i = encodeVarintLiquidity(dAtA, i, uint64(len(m.ReserveCoinDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolTypeIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolTypeIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPoolMetaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPoolMetaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPoolMetaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolCoinTotalSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolID != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPoolBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPoolBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPoolBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionStatus {
		i--
		if m.ExecutionStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SwapMsgIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.SwapMsgIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.WithdrawMsgIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.WithdrawMsgIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.DepositMsgIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.DepositMsgIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.BeginHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.BeginHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.BatchIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchPoolDepositMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPoolDepositMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchPoolDepositMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchPoolWithdrawMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPoolWithdrawMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchPoolWithdrawMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchPoolSwapMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchPoolSwapMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchPoolSwapMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidity(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityPoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolTypeIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolTypeIndex))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if m.MinReserveCoinNum != 0 {
		n += 1 + sovLiquidity(uint64(m.MinReserveCoinNum))
	}
	if m.MaxReserveCoinNum != 0 {
		n += 1 + sovLiquidity(uint64(m.MaxReserveCoinNum))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityPoolTypes) > 0 {
		for _, e := range m.LiquidityPoolTypes {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	l = m.MinInitDepositToPool.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.InitPoolCoinMintAmount.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.SwapFeeRate.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.LiquidityPoolFeeRate.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if len(m.LiquidityPoolCreationFee) > 0 {
		for _, e := range m.LiquidityPoolCreationFee {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	if m.UnitBatchSize != 0 {
		n += 1 + sovLiquidity(uint64(m.UnitBatchSize))
	}
	return n
}

func (m *LiquidityPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolID))
	}
	if m.PoolTypeIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolTypeIndex))
	}
	if len(m.ReserveCoinDenoms) > 0 {
		for _, s := range m.ReserveCoinDenoms {
			l = len(s)
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	l = len(m.ReserveAccount)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func (m *LiquidityPoolMetaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolID))
	}
	l = m.PoolCoinTotalSupply.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	return n
}

func (m *LiquidityPoolBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolID))
	}
	if m.BatchIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.BatchIndex))
	}
	if m.BeginHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.BeginHeight))
	}
	if m.DepositMsgIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.DepositMsgIndex))
	}
	if m.WithdrawMsgIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.WithdrawMsgIndex))
	}
	if m.SwapMsgIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.SwapMsgIndex))
	}
	if m.ExecutionStatus {
		n += 2
	}
	return n
}

func (m *BatchPoolDepositMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func (m *BatchPoolWithdrawMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func (m *BatchPoolSwapMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func sovLiquidity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidity(x uint64) (n int) {
	return sovLiquidity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityPoolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPoolType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPoolType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypeIndex", wireType)
			}
			m.PoolTypeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTypeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReserveCoinNum", wireType)
			}
			m.MinReserveCoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReserveCoinNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReserveCoinNum", wireType)
			}
			m.MaxReserveCoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReserveCoinNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityPoolTypes = append(m.LiquidityPoolTypes, LiquidityPoolType{})
			if err := m.LiquidityPoolTypes[len(m.LiquidityPoolTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitDepositToPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitDepositToPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPoolCoinMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitPoolCoinMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeRate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolFeeRate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityPoolFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityPoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityPoolCreationFee = append(m.LiquidityPoolCreationFee, types.Coin{})
			if err := m.LiquidityPoolCreationFee[len(m.LiquidityPoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitBatchSize", wireType)
			}
			m.UnitBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitBatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypeIndex", wireType)
			}
			m.PoolTypeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTypeIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveCoinDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveCoinDenoms = append(m.ReserveCoinDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAccount = append(m.ReserveAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.ReserveAccount == nil {
				m.ReserveAccount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPoolMetaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPoolMetaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPoolMetaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinTotalSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCoinTotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPoolBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPoolBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPoolBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginHeight", wireType)
			}
			m.BeginHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositMsgIndex", wireType)
			}
			m.DepositMsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositMsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawMsgIndex", wireType)
			}
			m.WithdrawMsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawMsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMsgIndex", wireType)
			}
			m.SwapMsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecutionStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPoolDepositMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPoolDepositMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPoolDepositMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgDepositToLiquidityPool{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPoolWithdrawMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPoolWithdrawMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPoolWithdrawMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgWithdrawFromLiquidityPool{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchPoolSwapMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchPoolSwapMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchPoolSwapMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgSwap{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidity = fmt.Errorf("proto: unexpected end of group")
)
